import re
import json
import aiohttp
import asyncio
from datetime import datetime
from FunPayAPI import Account
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

def load_config():
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞.")
        exit(1)
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.json. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON.")
        exit(1)


class StarBot:
    def __init__(self, config: dict):
        self.config = config
        self.bot = None
        self.dp = None
        self.storage = MemoryStorage()
        self.api_config = self.config["API"]
        self.bot_config = self.config["BOT"]
        self.funpay_config = self.config["FUNPAY"]
        self.settings = self.config["SETTINGS"]

    async def load_db(self) -> dict:
        try:
            with open(self.settings["db_path"], "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ {self.settings['db_path']}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.")
            return {}
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏ {self.settings['db_path']}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.")
            return {}

    async def save_db(self, db: dict):
        with open(self.settings["db_path"], "w", encoding="utf-8") as f:
            json.dump(db, f, ensure_ascii=False, indent=2)

    async def extract_order_info(self, description: str) -> tuple:
        try:
            login = None
            if "," in description:
                login = description.split(",")[-1].strip().lstrip("@")
          
            if not login:
                match = re.search(r"@([A-Za-z][A-Za-z0-9_]{4,31})", description)
                if match:
                    login = match.group(1)

            stars_match = re.search(r"(\d+)\s*–∑–≤", description, re.IGNORECASE)
            stars = int(stars_match.group(1)) if stars_match else None

            return login, stars

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None, None

    async def send_funpay_message(self, account: Account, username: str, message: str) -> bool:
        try:
            chat = account.get_chat_by_name(username, make_request=True)
            if not chat or not hasattr(chat, 'id'):
                print(f"–ß–∞—Ç —Å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
                return False
          
            account.send_message(chat_id=chat.id, text=message)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FunPay: {e}")
            return False

    async def create_telegram_message(self, order_id: str, login: str, stars: int, tx_hash: str) -> str:
        return (
            f"‚ú® <b>–£–°–ü–ï–®–ù–ê–Ø –í–´–î–ê–ß–ê –ó–í–Å–ó–î</b> ‚ú®\n\n"
            f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>#{order_id}</code>\n"
            f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> <code>@{login}</code>\n"
            f"‚≠ê <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:</b> <code>{stars} —à—Ç.</code>\n"
            f"üìú <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>{tx_hash}</code>\n\n"
            "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n\n"
            "üí¨ <b>–î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b>\n"
            "<i>–ó–≤—ë–∑–¥—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤ —á–∞—Ç–µ FunPay.</i>\n\n"
            f"<a href='https://funpay.com/orders/{order_id}/'>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑</a>"
        )

    async def create_funpay_message(self, order_id: str, login: str, stars: int, tx_hash: str) -> str:
        return (
            f"üåü [b]–í–ê–® –ó–ê–ö–ê–ó #[/b]{order_id} [b]–í–´–ü–û–õ–ù–ï–ù![/b] üåü\n\n"
            f"‚úî [b]–ü–æ–ª—É—á–∞—Ç–µ–ª—å:[/b] @{login}\n"
            f"‚úî [b]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:[/b] {stars} —à—Ç.\n"
            f"‚úî [b]ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:[/b] {tx_hash}\n\n"
            "[i]–ó–≤—ë–∑–¥—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. "
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º.[/i]\n\n"
            "[u]–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:[/u]\n"
            "1. –ù–∞–∂–º–∏—Ç–µ \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\"\n"
            "2. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –º–∞–≥–∞–∑–∏–Ω–∞\n\n"
            f"[url=https://funpay.com/orders/{order_id}/]‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–∫–∞–∑–µ[/url]\n\n"
            "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –≤–∞—à –º–∞–≥–∞–∑–∏–Ω StarShop!"
        )

    async def create_error_message(self, order_id: str, login: str, stars: int, error: str) -> str:
        return (
            f"‚ö†Ô∏è <b>–û–®–ò–ë–ö–ê –ü–†–ò –í–´–î–ê–ß–ï –ó–í–Å–ó–î</b> ‚ö†Ô∏è\n\n"
            f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>#{order_id}</code>\n"
            f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> <code>@{login}</code>\n"
            f"‚≠ê <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:</b> <code>{stars} —à—Ç.</code>\n\n"
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n<code>{error}</code>\n\n"
            "üõ† <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥\n"
            "2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞\n"
            "3. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
        )

    async def process_order(self, order, account: Account, admin_telegram_id: int):
        login, stars = await self.extract_order_info(order.description)
        if not login or not stars or stars < 50:
            print(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ #{order.id}")
            db = await self.load_db()
            db.setdefault(str(admin_telegram_id), {}).setdefault("succorders", []).append(order.id)
            await self.save_db(db)
            return

        count = getattr(order, "amount", 1) or 1
        total_stars = stars * count
        buyer_username = getattr(order, "buyer_username", None)

        payload = {
            "username": login,
            "quantity": total_stars,
            "hide_sender": 1,
        }
        headers = {
            "accept": "application/json",
            "X-API-Token": self.api_config["token"],
            "Content-Type": "application/json",
        }

        db = await self.load_db()
        db.setdefault(str(admin_telegram_id), {}).setdefault("succorders", []).append(order.id)
        await self.save_db(db)

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.api_config["url"],
                    json=payload,
                    headers=headers,
                    timeout=self.settings["request_timeout"]
                ) as resp:
                    response = await resp.json()

                    if resp.status == 200 and response.get("success"):
                        tx_hash = response.get("transfers", [{}])[0].get("tx_hash", "N/A")
                      
                        if admin_telegram_id:
                            tg_msg = await self.create_telegram_message(
                                order.id, login, total_stars, tx_hash
                            )
                            await self.bot.send_message(
                                chat_id=admin_telegram_id,
                                text=tg_msg,
                                parse_mode="HTML"
                            )

                        if buyer_username:
                            fp_msg = await self.create_funpay_message(
                                order.id, login, total_stars, tx_hash
                            )
                            await self.send_funpay_message(account, buyer_username, fp_msg)

                        shop_data = db.setdefault(str(admin_telegram_id), {})
                        shop_data.setdefault("payment_history", []).append({
                            "order_number": f"#{order.id}",
                            "amount_dollar": 0,
                            "original_amount": total_stars,
                            "currency": "stars",
                            "login": login,
                            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "tx_hash": tx_hash
                        })
                        await self.save_db(db)

                    else:
                        error_msg = response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                        if admin_telegram_id:
                            err_msg = await self.create_error_message(
                                order.id, login, total_stars, error_msg
                            )
                            await self.bot.send_message(
                                chat_id=admin_telegram_id,
                                text=err_msg,
                                parse_mode="HTML"
                            )

        except Exception as e:
            error_msg = f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            if admin_telegram_id:
                err_msg = await self.create_error_message(
                    order.id, login, total_stars, error_msg
                )
                await self.bot.send_message(
                    chat_id=admin_telegram_id,
                    text=err_msg,
                    parse_mode="HTML"
                )

    async def check_orders(self):
        admin_telegram_id = self.settings.get("admin_telegram_id")

        if not self.funpay_config["golden_key"]:
            print("FunPay Golden Key –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return

        while True:
            await asyncio.sleep(self.settings["order_check_interval"])
          
            try:
                account = Account(self.funpay_config["golden_key"])
                account.get()
              
                sells = account.get_sells()
                if not sells or len(sells) < 2:
                    continue

                orders = sells[1]
                excluded_statuses = {"REFUNDED", "CLOSED", "COMPLETED"}

                db = await self.load_db()
                processed_orders_for_user = db.setdefault(str(admin_telegram_id), {}).setdefault("succorders", [])

                for order in orders:
                    if not order or not hasattr(order, "id"):
                        continue

                    if str(order.status) in excluded_statuses:
                        continue

                    if order.id in processed_orders_for_user:
                        continue



                    await self.process_order(order, account, admin_telegram_id)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ FunPay: {e}")
                if admin_telegram_id:
                    try:
                        await self.bot.send_message(
                            chat_id=admin_telegram_id,
                            text=f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ FunPay —á–µ–∫–µ—Ä–∞!</b>\n\n<code>{e}</code>",
                            parse_mode="HTML"
                        )
                    except Exception as tg_e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram: {tg_e}")

    async def ping_api_server(self):
        ping_url = self.api_config.get("ping_url")
        api_token = self.api_config.get("token")

        if not ping_url:
            print("URL –¥–ª—è –ø–∏–Ω–≥–∞ API –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return False
        if not api_token:
            print("API Token –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–∏–Ω–≥ API –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return False

        headers = {
            "accept": "application/json",
            "X-API-Token": api_token,
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(ping_url, headers=headers, timeout=5) as resp:
                    response_json = await resp.json()
                    if resp.status == 200 and response_json.get("status") == True and response_json.get("message") == "pong":
                        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø–∏–Ω–≥–æ–≤–∞–Ω: pong")
                        return True
                    else:
                        print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º: HTTP {resp.status}, –û—Ç–≤–µ—Ç: {response_json}")
                        return False
        except aiohttp.ClientError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏ –ø–∏–Ω–≥–µ: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False

    async def start_bot(self):
        # Ping API server on startup
        print("–ü–æ–ø—ã—Ç–∫–∞ –ø–∏–Ω–≥–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
        api_ok = await self.ping_api_server()
        if not api_ok:
            print("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–µ—Ä—É. –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∞.")
            # Decide if you want to exit or continue
            # For now, it will continue, but you might want to add sys.exit(1) here
            # or only proceed if API is available for critical functions.
        else:
            print("üü¢ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω.")

        if self.bot_config["enabled"] == 0:
            print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Telegram –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (BOT -> enabled: 0).")
            if self.funpay_config["golden_key"]:
                print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ FunPay –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –±–µ–∑ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                asyncio.create_task(self.check_orders())
                while True:
                    await asyncio.sleep(3600)
            return

        if not self.bot_config["bot_token"]:
            print("Bot Token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ë–æ—Ç Telegram –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
            if self.funpay_config["golden_key"]:
                print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ FunPay –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –±–µ–∑ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                asyncio.create_task(self.check_orders())
                while True:
                    await asyncio.sleep(3600)
            return

        self.bot = Bot(token=self.bot_config["bot_token"])
        self.dp = Dispatcher(storage=self.storage)

        @self.dp.message(Command("start"))
        async def send_welcome(message: types.Message):
            if not self.settings.get("admin_telegram_id"):
                self.settings["admin_telegram_id"] = message.from_user.id
                db = await self.load_db()
                db_for_admin = db.setdefault(str(message.from_user.id), {})
                db_for_admin.setdefault("succorders", [])
                db_for_admin.setdefault("payment_history", [])
                await self.save_db(db)
                print(f"Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.from_user.id}")
                await message.answer(
                    f"–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π Telegram ID ({message.from_user.id}) –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—é–¥–∞."
                )
            else:
                await message.answer(
                    "ü§ñ <b>StarBot - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –∑–≤—ë–∑–¥ FunPay</b>\n\n"
                    "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ –≤—ã–¥–∞—é –∑–≤—ë–∑–¥—ã.\n"
                    "–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                    "1. –î–æ–±–∞–≤–∏—Ç—å golden_key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (—É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ)\n"
                    "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å \"online\" –Ω–∞ FunPay\n\n"
                    "üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @support",
                    parse_mode="HTML"
                )

        asyncio.create_task(self.check_orders())

        try:
            print("–ë–æ—Ç Telegram –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥...")
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ FunPay –∑–∞–ø—É—â–µ–Ω–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {self.settings['order_check_interval']} —Å–µ–∫—É–Ω–¥.")
            if self.settings.get("admin_telegram_id"):
                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ Telegram ID: {self.settings['admin_telegram_id']}")
                await self.bot.send_message(
                    chat_id=self.settings["admin_telegram_id"],
                    text="‚úÖ <b>StarBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É!</b>\n\n"
                         "–Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ FunPay –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã. "
                         "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–¥–∞—á–∞—Ö –∏ –æ—à–∏–±–∫–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.",
                    parse_mode="HTML"
                )
            else:
                print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π Telegram ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É –¥–ª—è –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
              
            await self.dp.start_polling(self.bot)
        finally:
            await self.storage.close()
            await self.storage.wait_closed()
            print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    config = load_config()
    bot = StarBot(config)
    asyncio.run(bot.start_bot())